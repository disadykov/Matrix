#include <check.h>

#include "../s21_matrix.h"

#test test_mult_matrix1
matrix_t a, b, c, d;
s21_create_matrix(3, 2, &a);
s21_create_matrix(2, 3, &b);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = 1;
a.matrix[0][1] = 4;
a.matrix[1][0] = 2;
a.matrix[1][1] = 5;
a.matrix[2][0] = 3;
a.matrix[2][1] = 6;
b.matrix[0][0] = 1;
b.matrix[0][1] = -1;
b.matrix[0][2] = 1;
b.matrix[1][0] = 2;
b.matrix[1][1] = 3;
b.matrix[1][2] = 4;
d.matrix[0][0] = 9;
d.matrix[0][1] = 11;
d.matrix[0][2] = 17;
d.matrix[1][0] = 12;
d.matrix[1][1] = 13;
d.matrix[1][2] = 22;
d.matrix[2][0] = 15;
d.matrix[2][1] = 15;
d.matrix[2][2] = 27;
int ret = s21_mult_matrix(&a, &b, &c);
ck_assert_int_eq(ret, MATRIX_OK);
int res = s21_eq_matrix(&c, &d);
ck_assert_int_eq(res, SUCCESS);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&b);
s21_remove_matrix(&d);

#test test_mult_matrix2
matrix_t a, b, c, d;
s21_create_matrix(3, 2, &a);
s21_create_matrix(2, 3, &b);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = 1;
a.matrix[0][1] = 4;
a.matrix[1][0] = 2;
a.matrix[1][1] = 5;
a.matrix[2][0] = 3;
a.matrix[2][1] = 6;
b.matrix[0][0] = 1;
b.matrix[0][1] = 1;
b.matrix[0][2] = 1;
b.matrix[1][0] = 1;
b.matrix[1][1] = 1;
b.matrix[1][2] = 1;
d.matrix[0][0] = 5;
d.matrix[0][1] = 5;
d.matrix[0][2] = 5;
d.matrix[1][0] = 7;
d.matrix[1][1] = 7;
d.matrix[1][2] = 7;
d.matrix[2][0] = 9;
d.matrix[2][1] = 9;
d.matrix[2][2] = 9;
int ret = s21_mult_matrix(&a, &b, &c);
ck_assert_int_eq(ret, MATRIX_OK);
int res = s21_eq_matrix(&c, &d);
ck_assert_int_eq(res, SUCCESS);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&b);
s21_remove_matrix(&d);

#test test_sum_matrix3
matrix_t a = {0};
matrix_t b = {0};
matrix_t c = {0};
s21_create_matrix(-1, 0, &a);
s21_create_matrix(3, 3, &b);
int res = s21_mult_matrix(&a, &b, &c);
ck_assert_int_eq(res, MATRIX_INCORRECT);
s21_remove_matrix(&a);
s21_remove_matrix(&b);
s21_remove_matrix(&c);

#test test_sum_matrix4
matrix_t a = {0};
matrix_t b = {0};
matrix_t c = {0};
s21_create_matrix(10, 10, &a);
s21_create_matrix(3, 3, &b);
int res = s21_mult_matrix(&a, &b, &c);
ck_assert_int_eq(res, MATRIX_CALC_ERR);
s21_remove_matrix(&a);
s21_remove_matrix(&b);
s21_remove_matrix(&c);

#test test_mult_matrix5
matrix_t a, b, c, d;
s21_create_matrix(3, 2, &a);
s21_create_matrix(2, 3, &b);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = 1;
a.matrix[0][1] = 4;
a.matrix[1][0] = 2;
a.matrix[1][1] = 5;
a.matrix[2][0] = 3;
a.matrix[2][1] = 6;
b.matrix[0][0] = -1;
b.matrix[0][1] = -1;
b.matrix[0][2] = -1;
b.matrix[1][0] = -1;
b.matrix[1][1] = -1;
b.matrix[1][2] = -1;
d.matrix[0][0] = -5;
d.matrix[0][1] = -5;
d.matrix[0][2] = -5;
d.matrix[1][0] = -7;
d.matrix[1][1] = -7;
d.matrix[1][2] = -7;
d.matrix[2][0] = -9;
d.matrix[2][1] = -9;
d.matrix[2][2] = -9;
int ret = s21_mult_matrix(&a, &b, &c);
ck_assert_int_eq(ret, MATRIX_OK);
int res = s21_eq_matrix(&c, &d);
ck_assert_int_eq(res, SUCCESS);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&b);
s21_remove_matrix(&d);

#test test_mult_matrix6
matrix_t a, b, c, d;
s21_create_matrix(3, 2, &a);
s21_create_matrix(2, 3, &b);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = 1;
a.matrix[0][1] = 4;
a.matrix[1][0] = 2;
a.matrix[1][1] = 5;
a.matrix[2][0] = 3;
a.matrix[2][1] = 6;
b.matrix[0][0] = 0;
b.matrix[0][1] = 0;
b.matrix[0][2] = 0;
b.matrix[1][0] = 0;
b.matrix[1][1] = 0;
b.matrix[1][2] = 0;
d.matrix[0][0] = 0;
d.matrix[0][1] = 0;
d.matrix[0][2] = 0;
d.matrix[1][0] = 0;
d.matrix[1][1] = 0;
d.matrix[1][2] = 0;
d.matrix[2][0] = 0;
d.matrix[2][1] = 0;
d.matrix[2][2] = 0;
int ret = s21_mult_matrix(&a, &b, &c);
ck_assert_int_eq(ret, MATRIX_OK);
int res = s21_eq_matrix(&c, &d);
ck_assert_int_eq(res, SUCCESS);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&b);
s21_remove_matrix(&d);

#test test_mult_matrix7
matrix_t a, b, c, d;
s21_create_matrix(3, 2, &a);
s21_create_matrix(2, 3, &b);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = 1;
a.matrix[0][1] = 4;
a.matrix[1][0] = 2;
a.matrix[1][1] = 5;
a.matrix[2][0] = 3;
a.matrix[2][1] = 6;
b.matrix[0][0] = 0;
b.matrix[0][1] = 0;
b.matrix[0][2] = 0;
b.matrix[1][0] = 0;
b.matrix[1][1] = 0;
b.matrix[1][2] = 0;
d.matrix[0][0] = 0;
d.matrix[0][1] = 0;
d.matrix[0][2] = 0;
d.matrix[1][0] = 0;
d.matrix[1][1] = 0;
d.matrix[1][2] = 0;
d.matrix[2][0] = 0;
d.matrix[2][1] = 0.00000001;
d.matrix[2][2] = 0;
int ret = s21_mult_matrix(&a, &b, &c);
ck_assert_int_eq(ret, MATRIX_OK);
int res = s21_eq_matrix(&c, &d);
ck_assert_int_eq(res, SUCCESS);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&b);
s21_remove_matrix(&d);

#test test_mult_matrix8
matrix_t a, b, c, d;
s21_create_matrix(3, 2, &a);
s21_create_matrix(2, 3, &b);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = 1;
a.matrix[0][1] = 4;
a.matrix[1][0] = 2;
a.matrix[1][1] = 5;
a.matrix[2][0] = 3;
a.matrix[2][1] = 6;
b.matrix[0][0] = 0;
b.matrix[0][1] = 0;
b.matrix[0][2] = 0;
b.matrix[1][0] = 0;
b.matrix[1][1] = 0;
b.matrix[1][2] = 0;
d.matrix[0][0] = 0;
d.matrix[0][1] = 0;
d.matrix[0][2] = 0;
d.matrix[1][0] = 0;
d.matrix[1][1] = 0;
d.matrix[1][2] = 0;
d.matrix[2][0] = 0;
d.matrix[2][1] = 0.0000001;
d.matrix[2][2] = 0;
int ret = s21_mult_matrix(&a, &b, &c);
ck_assert_int_eq(ret, MATRIX_OK);
int res = s21_eq_matrix(&c, &d);
ck_assert_int_eq(res, FAILURE);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&b);
s21_remove_matrix(&d);

#test test_mult_matrix9
matrix_t a, b, c, d;
s21_create_matrix(3, 2, &a);
s21_create_matrix(2, 3, &b);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = -10.39299774;
a.matrix[0][1] = 99.43617249;
a.matrix[1][0] = -39.53340149;
a.matrix[1][1] = 47.29440308;
a.matrix[2][0] = 66.40528870;
a.matrix[2][1] = 93.58891296;
b.matrix[0][0] = 1.41286802;
b.matrix[0][1] = 4.97818899;
b.matrix[0][2] = 0.46689999;
b.matrix[1][0] = 3.28554106;
b.matrix[1][1] = 3.90592670;
b.matrix[1][2] = 4.78837299;
d.matrix[0][0] = 312.01769343;
d.matrix[0][1] = 336.65209415;
d.matrix[0][2] = 471.28499204;
d.matrix[1][0] = 99.53222454;
d.matrix[1][1] = -12.07627228;
d.matrix[1][2] = 208.00509753;
d.matrix[2][0] = 401.31212505;
d.matrix[2][1] = 696.12951104;
d.matrix[2][2] = 479.14325161;
int ret = s21_mult_matrix(&a, &b, &c);
ck_assert_int_eq(ret, MATRIX_OK);
int res = s21_eq_matrix(&c, &d);
ck_assert_int_eq(res, SUCCESS);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&b);
s21_remove_matrix(&d);

#test test_mult_matrix10
matrix_t a, b, c, d;
s21_create_matrix(3, 2, &a);
s21_create_matrix(2, 3, &b);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = -10.39299774;
a.matrix[0][1] = 99.43617249;
a.matrix[1][0] = -39.53340149;
a.matrix[1][1] = 47.29440308;
a.matrix[2][0] = 66.40528870;
a.matrix[2][1] = 93.58891296;
b.matrix[0][0] = 1.41286802;
b.matrix[0][1] = 4.97818899;
b.matrix[0][2] = 0.46689999;
b.matrix[1][0] = 3.28554106;
b.matrix[1][1] = 3.90592670;
b.matrix[1][2] = 4.78837299;
d.matrix[0][0] = 312.017693439999999;
d.matrix[0][1] = 336.65209415;
d.matrix[0][2] = 471.28499204;
d.matrix[1][0] = 99.53222454;
d.matrix[1][1] = -12.07627228;
d.matrix[1][2] = 208.00509753;
d.matrix[2][0] = 401.31212505;
d.matrix[2][1] = 696.12951104;
d.matrix[2][2] = 479.14325161;
int ret = s21_mult_matrix(&a, &b, &c);
ck_assert_int_eq(ret, MATRIX_OK);
int res = s21_eq_matrix(&c, &d);
ck_assert_int_eq(res, SUCCESS);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&b);
s21_remove_matrix(&d);

#test test_mult_matrix11
matrix_t a, b, c, d;
s21_create_matrix(3, 2, &a);
s21_create_matrix(2, 3, &b);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = -10.39299774;
a.matrix[0][1] = 99.43617249;
a.matrix[1][0] = -39.53340149;
a.matrix[1][1] = 47.29440308;
a.matrix[2][0] = 66.40528870;
a.matrix[2][1] = 93.58891296;
b.matrix[0][0] = 1.41286802;
b.matrix[0][1] = 4.97818899;
b.matrix[0][2] = 0.46689999;
b.matrix[1][0] = 3.28554106;
b.matrix[1][1] = 3.90592670;
b.matrix[1][2] = 4.78837299;
d.matrix[0][0] = 312.0176935;
d.matrix[0][1] = 336.65209415;
d.matrix[0][2] = 471.28499204;
d.matrix[1][0] = 99.53222454;
d.matrix[1][1] = -12.07627228;
d.matrix[1][2] = 208.00509753;
d.matrix[2][0] = 401.31212505;
d.matrix[2][1] = 696.12951104;
d.matrix[2][2] = 479.14325161;
int ret = s21_mult_matrix(&a, &b, &c);
ck_assert_int_eq(ret, MATRIX_OK);
int res = s21_eq_matrix(&c, &d);
ck_assert_int_eq(res, FAILURE);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&b);
s21_remove_matrix(&d);