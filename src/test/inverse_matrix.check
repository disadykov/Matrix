#include <check.h>

#include "../s21_matrix.h"

#test test_inverse_matrix_number1
matrix_t a = {0};
matrix_t b = {0};
s21_create_matrix(-1, 1, &a);
int res = s21_inverse_matrix(&a, &b);
ck_assert_int_eq(res, MATRIX_INCORRECT);
s21_remove_matrix(&a);
s21_remove_matrix(&b);

#test test_inverse_matrix_number2
double src_matrix[3][3] = {{2, 5, 7}, {6, 3, 4}, {5, -2, -3}};
double res_matrix[3][3] = {{1, -1, 1}, {-38, 41, -34}, {27, -29, 24}};
matrix_t a, b, c;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &b);
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    a.matrix[i][j] = src_matrix[i][j];
  }
}
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    b.matrix[i][j] = res_matrix[i][j];
  }
}
int res = s21_inverse_matrix(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);
int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, SUCCESS);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);

#test test_inverse_matrix_number3
matrix_t a = {0};
matrix_t b = {0};
s21_create_matrix(2, 3, &a);
int res = s21_inverse_matrix(&a, &b);
ck_assert_int_eq(res, MATRIX_CALC_ERR);
s21_remove_matrix(&a);
s21_remove_matrix(&b);

#test test_inverse_matrix_number4
matrix_t a = {0};
matrix_t b = {0};
s21_create_matrix(3, 3, &a);

int res = s21_inverse_matrix(&a, &b);
ck_assert_int_eq(res, MATRIX_CALC_ERR);
s21_remove_matrix(&a);
s21_remove_matrix(&b);

#test test_inverse_matrix_number5
matrix_t a, b, c;
s21_create_matrix(2, 2, &a);
s21_create_matrix(2, 2, &b);

a.matrix[0][0] = 3;
a.matrix[0][1] = 4;
a.matrix[1][0] = 5;
a.matrix[1][1] = 7;
b.matrix[0][0] = 7;
b.matrix[0][1] = -4;
b.matrix[1][0] = -5;
b.matrix[1][1] = 3;

int res = s21_inverse_matrix(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);

int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, SUCCESS);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);

#test test_inverse_matrix_number6
matrix_t a, b, c;
s21_create_matrix(1, 1, &a);
s21_create_matrix(1, 1, &b);

a.matrix[0][0] = 5;
b.matrix[0][0] = 0.2;
int res = s21_inverse_matrix(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);

int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, SUCCESS);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);

#test test_inverse_matrix_number7
matrix_t a, b, c;
s21_create_matrix(1, 1, &a);
s21_create_matrix(1, 1, &b);

a.matrix[0][0] = 5;
b.matrix[0][0] = 0.21;
int res = s21_inverse_matrix(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);

int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, FAILURE);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);

#test test_inverse_matrix_number8
double src_matrix[3][3] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
double res_matrix[3][3] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
matrix_t a, b, c;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &b);
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    a.matrix[i][j] = src_matrix[i][j];
  }
}
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    b.matrix[i][j] = res_matrix[i][j];
  }
}
int res = s21_inverse_matrix(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);
int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, SUCCESS);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);

#test test_inverse_matrix_number9
double src_matrix[3][3] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
double res_matrix[3][3] = {{1.000001, 0, 0}, {0, 1, 0}, {0, 0, 1}};
matrix_t a, b, c;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &b);
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    a.matrix[i][j] = src_matrix[i][j];
  }
}
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    b.matrix[i][j] = res_matrix[i][j];
  }
}
int res = s21_inverse_matrix(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);
int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, FAILURE);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);

#test test_inverse_matrix_number10
matrix_t a;
matrix_t b = {0};
s21_create_matrix(2, 3, &a);
a.matrix[0][0] = 3;
a.matrix[0][1] = 4;
a.matrix[0][2] = 5;
a.matrix[1][0] = 7;
a.matrix[1][1] = 7;
a.matrix[1][2] = -4;
int res = s21_inverse_matrix(&a, &b);
ck_assert_int_eq(res, MATRIX_CALC_ERR);
s21_remove_matrix(&a);
s21_remove_matrix(&b);
