#include <check.h>

#include "../s21_matrix.h"

#test test_calc_complements_number1
double src_matrix[3][3] = {{1, 2, 3}, {0, 4, 2}, {5, 2, 1}};
double res_matrix[3][3] = {{0, 10, -20}, {4, -14, 8}, {-8, -2, 4}};
matrix_t a, b, c;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &b);
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    a.matrix[i][j] = src_matrix[i][j];
  }
}
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    b.matrix[i][j] = res_matrix[i][j];
  }
}
int res = s21_calc_complements(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);
int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, SUCCESS);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);

#test test_calc_complements_number2
matrix_t a = {0};
matrix_t b = {0};

s21_create_matrix(-1, 0, &a);
int res = s21_calc_complements(&a, &b);
ck_assert_int_eq(res, MATRIX_INCORRECT);
s21_remove_matrix(&a);
s21_remove_matrix(&b);

#test test_calc_complements_number3
matrix_t a = {0};
matrix_t b = {0};
s21_create_matrix(1, 2, &a);
int res = s21_calc_complements(&a, &b);
ck_assert_int_eq(res, MATRIX_CALC_ERR);
s21_remove_matrix(&a);
s21_remove_matrix(&b);

#test test_calc_complements_number4
double src_matrix[3][3] = {{1.5, 2, 3}, {4, 5, 1.00005}, {7, 8, 9}};
double res_matrix[3][3] = {
    {36.9996, -28.99965, -3}, {6, -7.5, 2}, {-12.9999, 10.499925, -0.5}};
matrix_t a, b, c;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &b);
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    a.matrix[i][j] = src_matrix[i][j];
  }
}
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    b.matrix[i][j] = res_matrix[i][j];
  }
}
int res = s21_calc_complements(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);
int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, SUCCESS);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);

#test test_calc_complements_number5
double src_matrix[3][3] = {{1.5, 2, 3}, {4, 5, 1.00005}, {7, 8, 9}};
double res_matrix[3][3] = {
    {36.9996, -28.99965, -3}, {6, -7.5, 2}, {-12.99991, 10.499925, -0.5}};
matrix_t a, b, c;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &b);
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    a.matrix[i][j] = src_matrix[i][j];
  }
}
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    b.matrix[i][j] = res_matrix[i][j];
  }
}
int res = s21_calc_complements(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);
int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, FAILURE);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);

#test test_calc_complements_number6
double src_matrix[3][3] = {{1.5, 2, 3}, {4, 5, 1.00005}, {7, 8, 9}};
double res_matrix[3][3] = {
    {36.9996, -28.99965, -3}, {6, -7.5, 2}, {-12.99990009, 10.499925, -0.5}};
matrix_t a, b, c;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &b);
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    a.matrix[i][j] = src_matrix[i][j];
  }
}
for (int i = 0; i < a.rows; i++) {
  for (int j = 0; j < a.columns; j++) {
    b.matrix[i][j] = res_matrix[i][j];
  }
}
int res = s21_calc_complements(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);
int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, SUCCESS);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);

#test test_calc_complements_number7
matrix_t a, b, c;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &b);
a.matrix[0][0] = 5;
a.matrix[0][1] = 7;
a.matrix[0][2] = 1;
a.matrix[1][0] = -4;
a.matrix[1][1] = 1;
a.matrix[1][2] = 0;
a.matrix[2][0] = 2;
a.matrix[2][1] = 0;
a.matrix[2][2] = 3;

b.matrix[0][0] = 3;
b.matrix[0][1] = 12;
b.matrix[0][2] = -2;
b.matrix[1][0] = -21;
b.matrix[1][1] = 13;
b.matrix[1][2] = 14;
b.matrix[2][0] = -1;
b.matrix[2][1] = -4;
b.matrix[2][2] = 33;

int res = s21_calc_complements(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);
int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, SUCCESS);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);

#test test_calc_complements_number8
matrix_t a = {0};
matrix_t b = {0};
s21_create_matrix(1, 1, &a);
int res = s21_calc_complements(&a, &b);
ck_assert_int_eq(res, MATRIX_INCORRECT);
s21_remove_matrix(&a);
s21_remove_matrix(&b);

#test test_calc_complements_number9
matrix_t a, b, c;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &b);
a.matrix[0][0] = 5;
a.matrix[0][1] = 7;
a.matrix[0][2] = 1;
a.matrix[1][0] = -4;
a.matrix[1][1] = 1;
a.matrix[1][2] = 0;
a.matrix[2][0] = 2;
a.matrix[2][1] = 0;
a.matrix[2][2] = 3;

b.matrix[0][0] = 3;
b.matrix[0][1] = 12;
b.matrix[0][2] = -2;
b.matrix[1][0] = -21;
b.matrix[1][1] = 13;
b.matrix[1][2] = 14;
b.matrix[2][0] = -1.0000001;
b.matrix[2][1] = -4;
b.matrix[2][2] = 33;

int res = s21_calc_complements(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);
int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, FAILURE);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);

#test test_calc_complements_number10
matrix_t a, b, c;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &b);
a.matrix[0][0] = 5;
a.matrix[0][1] = 7;
a.matrix[0][2] = 1;
a.matrix[1][0] = -4;
a.matrix[1][1] = 1;
a.matrix[1][2] = 0;
a.matrix[2][0] = 2;
a.matrix[2][1] = 0;
a.matrix[2][2] = 3;

b.matrix[0][0] = 3;
b.matrix[0][1] = 12;
b.matrix[0][2] = -2;
b.matrix[1][0] = -21;
b.matrix[1][1] = 13;
b.matrix[1][2] = 14;
b.matrix[2][0] = -1.00000001;
b.matrix[2][1] = -4;
b.matrix[2][2] = 33;

int res = s21_calc_complements(&a, &c);
ck_assert_int_eq(res, MATRIX_OK);
int retrn = s21_eq_matrix(&b, &c);
ck_assert_int_eq(retrn, SUCCESS);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&b);