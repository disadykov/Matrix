#include <check.h>

#include "../s21_matrix.h"

#test test_mult_number1
matrix_t a, c, origin;
double number = 0;
int rows = 5;
int columns = 5;
float max = 10.234;
float min = -3.321;
s21_create_matrix(rows, columns, &origin);
int res = s21_create_matrix(rows, columns, &a);
ck_assert_int_eq(res, MATRIX_OK);
srand(time(NULL));
for (int i = 0; i < rows; i++) {
  for (int j = 0; j < columns; j++) {
    a.matrix[i][j] = (float)(rand()) / RAND_MAX * (max - min) + min;
    origin.matrix[i][j] = 0.0;
  }
}
int result = s21_mult_number(&a, number, &c);
ck_assert_int_eq(result, MATRIX_OK);
ck_assert_int_eq(s21_eq_matrix(&c, &origin), SUCCESS);
s21_remove_matrix(&a);
s21_remove_matrix(&c);
s21_remove_matrix(&origin);

#test test_mult_number2
matrix_t a = {0};
matrix_t c = {0};
double number = 0;
s21_create_matrix(-1, 0, &a);
int res = s21_mult_number(&a, number, &c);
ck_assert_int_eq(res, MATRIX_INCORRECT);
s21_remove_matrix(&a);
s21_remove_matrix(&c);

#test test_mult_number3
matrix_t a = {0};
matrix_t c = {0};
double number = 0.0 / 0.0;
s21_create_matrix(10, 10, &a);
int res = s21_mult_number(&a, number, &c);
ck_assert_int_eq(res, MATRIX_CALC_ERR);
s21_remove_matrix(&a);
s21_remove_matrix(&c);

#test test_mult_number4
matrix_t a = {0};
matrix_t c = {0};
double number = NAN;
s21_create_matrix(10, 10, &a);
int res = s21_mult_number(&a, number, &c);
ck_assert_int_eq(res, MATRIX_CALC_ERR);
s21_remove_matrix(&a);
s21_remove_matrix(&c);

#test test_mult_number5
matrix_t a = {0};
matrix_t c = {0};
double number = INFINITY;
s21_create_matrix(10, 10, &a);
int res = s21_mult_number(&a, number, &c);
ck_assert_int_eq(res, MATRIX_CALC_ERR);
s21_remove_matrix(&a);
s21_remove_matrix(&c);

#test test_mult_number6
matrix_t a = {0};
matrix_t c = {0};
double number = -INFINITY;
s21_create_matrix(10, 10, &a);
int res = s21_mult_number(&a, number, &c);
ck_assert_int_eq(res, MATRIX_CALC_ERR);
s21_remove_matrix(&a);
s21_remove_matrix(&c);

#test test_mult_number7
matrix_t matrix_1, res_my, res_org;
s21_create_matrix(4, 4, &matrix_1);
s21_create_matrix(4, 4, &res_org);
int ret = s21_mult_number(&matrix_1, 5, &res_my);
ck_assert_int_eq(ret, 0);
ret = s21_eq_matrix(&res_my, &res_org);
ck_assert_int_eq(ret, 1);
s21_remove_matrix(&matrix_1);
s21_remove_matrix(&res_my);
s21_remove_matrix(&res_org);

s21_create_matrix(4, 4, &matrix_1);
s21_create_matrix(4, 4, &res_org);
for (int i = 0; i < 4; i++) {
  for (int j = 0; j < 4; j++) {
    matrix_1.matrix[i][j] = i + j;
    res_org.matrix[i][j] = (i + j) * (-3);
  }
}
ret = s21_mult_number(&matrix_1, -3, &res_my);
ck_assert_int_eq(ret, 0);
ret = s21_eq_matrix(&res_my, &res_org);
ck_assert_int_eq(ret, 1);
s21_remove_matrix(&res_my);
s21_remove_matrix(&res_org);

s21_create_matrix(4, 4, &res_org);
for (int i = 0; i < 4; i++) {
  for (int j = 0; j < 4; j++) {
    matrix_1.matrix[i][j] = i + j;
  }
}
ret = s21_mult_number(&matrix_1, 0, &res_my);
ck_assert_int_eq(ret, 0);
ret = s21_eq_matrix(&res_my, &res_org);
ck_assert_int_eq(ret, 1);
s21_remove_matrix(&matrix_1);
s21_remove_matrix(&res_my);
s21_remove_matrix(&res_org);

#test test_mult_number8
matrix_t a, c, d;
double b = 2;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = 1;
a.matrix[0][1] = 2;
a.matrix[0][2] = 3;
a.matrix[1][0] = 1;
a.matrix[1][1] = 2;
a.matrix[1][2] = 3;
a.matrix[2][0] = 1;
a.matrix[2][1] = 2;
a.matrix[2][2] = 3;
d.matrix[0][0] = 2;
d.matrix[0][1] = 4;
d.matrix[0][2] = 6;
d.matrix[1][0] = 2;
d.matrix[1][1] = 4;
d.matrix[1][2] = 6;
d.matrix[2][0] = 2;
d.matrix[2][1] = 4;
d.matrix[2][2] = 6;
int res = s21_mult_number(&a, b, &c);
ck_assert_int_eq(res, MATRIX_OK);
ck_assert_int_eq(s21_eq_matrix(&c, &d), SUCCESS);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&d);

#test test_mult_number9
matrix_t a, c, d;
double b = 2;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = 1;
a.matrix[0][1] = 2;
a.matrix[0][2] = 3;
a.matrix[1][0] = 1;
a.matrix[1][1] = 2;
a.matrix[1][2] = 3;
a.matrix[2][0] = 1;
a.matrix[2][1] = 2;
a.matrix[2][2] = 3;
d.matrix[0][0] = 2;
d.matrix[0][1] = 4;
d.matrix[0][2] = 6;
d.matrix[1][0] = 2;
d.matrix[1][1] = 4;
d.matrix[1][2] = 6;
d.matrix[2][0] = 2;
d.matrix[2][1] = 4;
d.matrix[2][2] = 6.000001;
int res = s21_mult_number(&a, b, &c);
ck_assert_int_eq(res, MATRIX_OK);
ck_assert_int_eq(s21_eq_matrix(&c, &d), FAILURE);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&d);

#test test_mult_number10
matrix_t a, c, d;
double b = 1;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = -95.48905945;
a.matrix[0][1] = 56.77267456;
a.matrix[0][2] = -68.41539764;
a.matrix[1][0] = 68.46740723;
a.matrix[1][1] = 50.83430481;
a.matrix[1][2] = 49.81060791;
a.matrix[2][0] = 1.65510559;
a.matrix[2][1] = 30.27920532;
a.matrix[2][2] = 0.99138641;
d.matrix[0][0] = -95.48905945;
d.matrix[0][1] = 56.77267456;
d.matrix[0][2] = -68.41539764;
d.matrix[1][0] = 68.46740723;
d.matrix[1][1] = 50.83430481;
d.matrix[1][2] = 49.81060791;
d.matrix[2][0] = 1.65510559;
d.matrix[2][1] = 30.27920532;
d.matrix[2][2] = 0.99138641;
int res = s21_mult_number(&a, b, &c);
ck_assert_int_eq(res, MATRIX_OK);
ck_assert_int_eq(s21_eq_matrix(&c, &d), SUCCESS);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&d);

#test test_mult_number11
matrix_t a, c, d;
double b = 0;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = -95.48905945;
a.matrix[0][1] = 56.77267456;
a.matrix[0][2] = -68.41539764;
a.matrix[1][0] = 68.46740723;
a.matrix[1][1] = 50.83430481;
a.matrix[1][2] = 49.81060791;
a.matrix[2][0] = 1.65510559;
a.matrix[2][1] = 30.27920532;
a.matrix[2][2] = 0.99138641;
d.matrix[0][0] = 0.0;
d.matrix[0][1] = 0.0;
d.matrix[0][2] = 0.0;
d.matrix[1][0] = 0.0;
d.matrix[1][1] = 0.0;
d.matrix[1][2] = 0.0;
d.matrix[2][0] = 0.0;
d.matrix[2][1] = 0.0;
d.matrix[2][2] = 0.0;
int res = s21_mult_number(&a, b, &c);
ck_assert_int_eq(res, MATRIX_OK);
ck_assert_int_eq(s21_eq_matrix(&c, &d), SUCCESS);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&d);

#test test_mult_number12
matrix_t a, c, d;
double b = 0.0;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = -95.48905945;
a.matrix[0][1] = 56.77267456;
a.matrix[0][2] = -68.41539764;
a.matrix[1][0] = 68.46740723;
a.matrix[1][1] = 50.83430481;
a.matrix[1][2] = 49.81060791;
a.matrix[2][0] = 1.65510559;
a.matrix[2][1] = 30.27920532;
a.matrix[2][2] = 0.99138641;
d.matrix[0][0] = 0.0;
d.matrix[0][1] = 0.0;
d.matrix[0][2] = 0.0;
d.matrix[1][0] = 0.0;
d.matrix[1][1] = 0.0;
d.matrix[1][2] = 0.0;
d.matrix[2][0] = 0.0;
d.matrix[2][1] = 0.00000001;
d.matrix[2][2] = 0.0;
int res = s21_mult_number(&a, b, &c);
ck_assert_int_eq(res, MATRIX_OK);
ck_assert_int_eq(s21_eq_matrix(&c, &d), SUCCESS);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&d);

#test test_mult_number13
matrix_t a, c, d;
double b = 0.0;
s21_create_matrix(3, 3, &a);
s21_create_matrix(3, 3, &d);
a.matrix[0][0] = -95.48905945;
a.matrix[0][1] = 56.77267456;
a.matrix[0][2] = -68.41539764;
a.matrix[1][0] = 68.46740723;
a.matrix[1][1] = 50.83430481;
a.matrix[1][2] = 49.81060791;
a.matrix[2][0] = 1.65510559;
a.matrix[2][1] = 30.27920532;
a.matrix[2][2] = 0.99138641;
d.matrix[0][0] = 0.0;
d.matrix[0][1] = 0.0;
d.matrix[0][2] = 0.0;
d.matrix[1][0] = 0.0;
d.matrix[1][1] = 0.0;
d.matrix[1][2] = 0.0;
d.matrix[2][0] = 0.0;
d.matrix[2][1] = 0.0000001;
d.matrix[2][2] = 0.0;
int res = s21_mult_number(&a, b, &c);
ck_assert_int_eq(res, MATRIX_OK);
ck_assert_int_eq(s21_eq_matrix(&c, &d), FAILURE);
s21_remove_matrix(&c);
s21_remove_matrix(&a);
s21_remove_matrix(&d);